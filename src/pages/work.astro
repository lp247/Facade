---
import {getCollection} from "astro:content";
import Standard from "@layouts/Standard.astro";
import BadgeListContainer from "@components/BadgeListContainer.astro";
import {getEntries} from "astro:content";
import EntityBadge from "@components/EntityBadge.astro";

const entries = await getCollection("job");
const entriesWithContent = await Promise.all(
    entries.map(async (entry) => {
        const Content = await entry.render();
        return {
            ...entry,
            rendered: Content,
        };
    }),
);
entriesWithContent.sort((a, b) => (a.data.startDate > b.data.startDate ? -1 : 1));
const projects = await getCollection("project");
---

<Standard heading="Work Experience">
    {
        entriesWithContent.map(async (entry) => {
            const Content = entry.rendered.Content;
            const startString = new Date(entry.data.startDate).toISOString().substring(0, 10);
            const endString = !!entry.data.endDate ? new Date(entry.data.endDate).toISOString().substring(0, 10) : "Today";
            const location = entry.data.location;
            const relatedProjects = projects.filter((p) => typeof p.data.scope !== "string" && p.data.scope.slug === entry.slug);
            const allTechIds = [...entry.data.techs, ...relatedProjects.map((p) => p.data.techs).flat()].filter((item, pos, arr) => arr.indexOf(item) === pos);
            const allTechs = await getEntries(allTechIds);
            return (
                <div id={entry.slug}>
                    <h2 class="mb-2 mt-12">
                        {entry.data.jobDescription} @ {entry.data.company}
                    </h2>
                    <hr />
                    <p class="my-2 font-bold text-sm font-sans">
                        From {startString} until {endString} in {location}
                    </p>
                    {relatedProjects.length > 0 && (
                        <BadgeListContainer class="mb-1.5">
                            {relatedProjects.map((x) => (
                                <EntityBadge scope="project" text={x.data.name} link={`/project/${x.slug}`} />
                            ))}
                        </BadgeListContainer>
                    )}
                    {allTechs.length > 0 && (
                        <BadgeListContainer class="mb-1.5">
                            {allTechs.map((t) => (
                                <EntityBadge scope="tech" text={t.data.name} link={`/tech/${t.id}`} />
                            ))}
                        </BadgeListContainer>
                    )}
                    <hr />
                    <Content />
                </div>
            );
        })
    }
</Standard>
